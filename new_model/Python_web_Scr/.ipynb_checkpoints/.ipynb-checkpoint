{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test Web_Scrapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Packages \n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "import os\n",
    "import json\n",
    "import urllib\n",
    "import sys\n",
    "import time\n",
    "\n",
    "# adding path to geckodriver to the OS environment variable\n",
    "os.environ[\"PATH\"] += os.pathsep + os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Configuration des variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuration\n",
    "download_path = \"database/\"\n",
    "# Images\n",
    "words_to_search = ['hiéroglyphe']\n",
    "nb_to_download = [10]\n",
    "first_image_position = [0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    if len(words_to_search) != len(nb_to_download) or len(nb_to_download) != len(first_image_position) :\n",
    "        raise ValueError('You may have forgotten to configure one of the lists (length is different)')\n",
    "    i= 0\n",
    "    # For each word in the list, we download the number of images requested\n",
    "    while i<len(words_to_search):\n",
    "        print(\"Words \"+str(i)+\" : \"+str(nb_to_download[i])+\"x\\\"\"+words_to_search[i]+\"\\\"\")\n",
    "        if nb_to_download[i] > 0:\n",
    "            search_and_save(words_to_search[i],nb_to_download[i], first_image_position[i])\n",
    "        i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Words 0 : 10x\"hiéroglyphe\"\n",
      "Search : hiéroglyphe ; number : 10; first_position : 0 ; scrolls : 1\n",
      "Less images found:Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@value='Show more results']\"}\n",
      "  (Session info: chrome=79.0.3945.130)\n",
      "\n",
      "Total images:0\n",
      "\n",
      "Total skipped : 0; Total downloaded : 0/0\n"
     ]
    }
   ],
   "source": [
    "def search_and_save(text, number, first_position):\n",
    "    # Number_of_scrolls * 400 images will be opened in the browser\n",
    "    number_of_scrolls = int((number + first_position)/ 400 + 1) \n",
    "    print(\"Search : \"+text+\" ; number : \"+str(number)+\"; first_position : \"+str(first_position)+\" ; scrolls : \"+str(number_of_scrolls))\n",
    "\n",
    "    # Create directories to save images\n",
    "    if not os.path.exists(download_path + text.replace(\" \", \"_\")):\n",
    "        os.makedirs(download_path + text.replace(\" \", \"_\"))\n",
    "\n",
    "    # Connect to Google Image\n",
    "    url = \"https://www.google.co.in/search?q=\"+text+\"&source=lnms&tbm=isch\"\n",
    "    driver = webdriver.Chrome('/Users/priscille/Documents/OneDrive/Documents/4_M1_MIASHS/P2_TER_KARNAK/S2/Python_web_Scr/database/chromedriver')\n",
    "    driver.get(url)\n",
    "    headers = {}\n",
    "    headers['User-Agent'] = \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"\n",
    "    extensions = {\"jpg\", \"jpeg\", \"png\", \"gif\"}\n",
    "    \n",
    "    img_count = 0\n",
    "    downloaded_img_count = 0\n",
    "    img_skip = 0\n",
    "    \n",
    "    #Prepare Google Page\n",
    "    for _ in range(number_of_scrolls):\n",
    "        for __ in range(10):\n",
    "            # Multiple scrolls needed to show all 400 images\n",
    "            driver.execute_script(\"window.scrollBy(0, 1000000)\")\n",
    "            time.sleep(0.2)\n",
    "        # to load next 400 images\n",
    "        time.sleep(2.5)\n",
    "        try:\n",
    "            driver.find_element_by_xpath(\"//input[@value='Show more results']\").click()\n",
    "            time.sleep(2.5)\n",
    "        except Exception as e:\n",
    "            print(\"Less images found:\"+ str(e))\n",
    "            break\n",
    "\n",
    "    # Process (download) images\n",
    "    imges = driver.find_elements_by_xpath('//div[contains(@class,\"rg_meta\")]')\n",
    "    print(\"Total images:\"+ str(len(imges)) + \"\\n\")\n",
    "    for img in imges:\n",
    "        if img_skip < first_position:\n",
    "            # Skip first images if asked to\n",
    "            img_skip += 1\n",
    "        else :\n",
    "            # Get image\n",
    "            img_count += 1\n",
    "            img_url = json.loads(img.get_attribute('innerHTML'))[\"ou\"]\n",
    "            img_type = json.loads(img.get_attribute('innerHTML'))[\"ity\"]\n",
    "            print(\"Downloading image \"+ str(img_count) + \": \"+ img_url)\n",
    "            try:\n",
    "                if img_type not in extensions:\n",
    "                    img_type = \"jpg\"\n",
    "                # Download image and save it\n",
    "                req = urllib.request.Request(img_url, headers=headers)\n",
    "                raw_img = urllib.request.urlopen(req).read()\n",
    "                f = open(download_path+text.replace(\" \", \"_\")+\"/\"+str(img_skip+downloaded_img_count)+\".\"+img_type, \"wb\")\n",
    "                f.write(raw_img)\n",
    "                f.close\n",
    "                downloaded_img_count += 1\n",
    "            except Exception as e:\n",
    "                print(\"Download failed:\"+ str(e))\n",
    "            finally:\n",
    "                print(\"\")\n",
    "            if downloaded_img_count >= number:\n",
    "                break\n",
    "\n",
    "    print(\"Total skipped : \"+str(img_skip)+\"; Total downloaded : \"+ str(downloaded_img_count)+ \"/\"+ str(img_count))\n",
    "    driver.quit()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Search : hiéroglyphe ; number : 10; first_position : 0 ; scrolls : 1\n",
      "Less images found:Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@value='Show more results']\"}\n",
      "  (Session info: chrome=79.0.3945.130)\n",
      "\n",
      "Total images:0\n",
      "\n",
      "Total skipped : 0; Total downloaded : 0/0\n"
     ]
    }
   ],
   "source": [
    "search_and_save(\"hiéroglyphe\", 10, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test du webdriver\n",
    "\n",
    "import time\n",
    "from selenium import webdriver\n",
    "\n",
    "driver = webdriver.Chrome('/Users/priscille/Documents/OneDrive/Documents/4_M1_MIASHS/P2_TER_KARNAK/S2/Python_web_Scr/database/chromedriver')  # Optional argument, if not specified will search path.\n",
    "driver.get('http://www.google.com/');\n",
    "time.sleep(5) # Let the user actually see something!\n",
    "search_box = driver.find_element_by_name('q')\n",
    "search_box.send_keys('ChromeDriver')\n",
    "search_box.submit()\n",
    "time.sleep(5) # Let the user actually see something!\n",
    "driver.quit()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
