
import torch 
from model_build import  detection
from monoset import import_dataset
from dataset import PennFudanDataset
import transforms as T
import utils
import numpy as np
import torchvision 
from torchvision import transforms
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from PIL import Image

def get_transform(train):
    transforms = []
    transforms.append(T.ToTensor())
    if train:
        transforms.append(T.RandomHorizontalFlip(0.5))
    return T.Compose(transforms)


def train():

    dataset = PennFudanDataset('VOCdevkit',get_transform(train=True))
    dataset_test = PennFudanDataset('VOCdevkit',get_transform(train=False))
    indices = torch.randperm(len(dataset)).tolist()
    dataset = torch.utils.data.Subset(dataset, indices[:-50])
    dataset_test = torch.utils.data.Subset(dataset_test, indices[-50:])

    # define training and validation data loaders
    data_loader = torch.utils.data.DataLoader(
        dataset, batch_size=2, shuffle=True, num_workers=4,
        collate_fn=utils.collate_fn)

    data_loader_test = torch.utils.data.DataLoader(
        dataset_test, batch_size=1, shuffle=False, num_workers=4,
        collate_fn=utils.collate_fn)
    print("data loader : done ")
    #model = detection(10)
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)    
    #model.to(device)
    model.train()
    i = 0
    for image , target in data_loader :
        target = np.array(target)
        output = model(image, target)
        i += 1
        print("bash : ", i )
    print('end trainning')
    model.eval()
    img = Image.open("VOCdevkit/JPEGImages/000076.jpg").convert("RGB")
    print(np.shape(img))
    image = transforms(img)
    predictions = model(image)
    fig,ax = plt.subplots(1)
    ax.imshow(img)
    box = predictions[0]['boxes']
    for b in box :
        rect = patches.Rectangle((b[0],b[1]),b[2],b[3],linewidth=1,edgecolor='r',facecolor='none')
        # Add the patch to the Axes
        ax.add_patch(rect)
    plt.show()
if __name__ == "__main__":
    train()

